{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GOOG_Monte_Carlo","provenance":[],"private_outputs":true,"collapsed_sections":["Ctv3sbmQ5COZ","IRxxvZ94MwxP","VaFThucU5AyU","o79GSj9MSELS","ZZKYfBmwSIsw"],"toc_visible":true,"mount_file_id":"1kohw-0Z6Z1ZLeLJtIDwVrPwR-6Id3jGj","authorship_tag":"ABX9TyMx+tDRE073aKWbJdNevLS7"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Ctv3sbmQ5COZ","colab_type":"text"},"source":["##Alpha Vantage"]},{"cell_type":"code","metadata":{"id":"CPo2-bI0hteX","colab_type":"code","colab":{}},"source":["!pip install alpha_vantage"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jVuaxYnphbZ_","colab_type":"code","colab":{}},"source":["from alpha_vantage.timeseries import TimeSeries\n","import pandas as pd\n","\n","#credenziali\n","def download_stock(tag):\n","  key = 'LU9DR7V3CIMIZ522'\n","  ts = TimeSeries(key)\n","  stock, meta = ts.get_daily(symbol=tag, outputsize='full')\n","  return stock, meta"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2I2OLdalh6PF","colab_type":"code","colab":{}},"source":["import time\n","\n","def get_index(tag):\n","  df_, _ = download_stock(tag)\n","  df_ = pd.DataFrame(df_)\n","  df_ = df_.transpose()\n","  df_ = df_.loc['2020-09-10':'2019-09-10']\n","  df_ = df_['1. open']\n","  df_ = pd.DataFrame(df_)\n","\n","  #extract index and return it as series\n","  df_ = df_.reset_index()\n","  return df_['index']\n","\n","#moduli di download\n","def stock(tag, df_to_add):\n","  #passimo come df_to_add il database di stock già creato\n","  try:\n","    df_, _ = download_stock(tag)\n","    df_ = pd.DataFrame(df_)\n","    df_ = df_.transpose()\n","    df_ = df_.loc['2020-09-10':'2019-09-10']\n","    df_ = df_['1. open']\n","    df_ = pd.DataFrame(df_)\n","    df_.columns = [tag]\n","    df_ = df_[tag].values.astype(float)\n","    df_ = pd.concat([df_to_add, pd.DataFrame(df_)], axis=1)\n","    return df_, 'Successful'\n","  except:\n","    return df_to_add, 'Error'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IRxxvZ94MwxP","colab_type":"text"},"source":["##Stock Downloader"]},{"cell_type":"code","metadata":{"id":"Tl1qmjCWXWWG","colab_type":"code","colab":{}},"source":["#se lo volgiamo in più tranches, invece di utilizzare timers lo spezziamo\n","tag_list = ['Skip', 'GOOG']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mWLGglMBGBx1","colab_type":"code","colab":{}},"source":["#questo scarica il giusto index, OVVERO IL TIMESTAMP\n","index = get_index(tag_list[1])\n","index = pd.DataFrame(index) #conta come 1 richiesta\n","index"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6_blQ0dIpqBr","colab_type":"code","colab":{}},"source":["#csv of remaining stocks\n","empty = pd.DataFrame()\n","df, _ = stock(tag_list[0], empty) #solo per la prima si utilizza empty\n","for k in range(1, len(tag_list)):\n","  \n","  #print stock you are ATTEMPTING to download now\n","  print('Iteration:', k, 'Trying to download:', tag_list[k])\n","  \n","  #diciamo di aggiungere al database creato il nuovo download\n","  #se ci sono problemi da None e non viene aggiunto nulla\n","  df, result = stock(tag_list[k], df)\n","  print('Iteration:', k, result)\n","\n","  #every 4 stock pause 70 seconds\n","  if k%4 == 0:\n","    time.sleep(70)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rT3DhRgz5O_v","colab_type":"code","colab":{}},"source":["#renaming the columns with tag_list\n","df.columns = tag_list[1:]\n","df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pc6yf94FbLsu","colab_type":"code","colab":{}},"source":["df1 = df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ehkR7L7PQnab","colab_type":"code","colab":{}},"source":["#reattach index\n","total = pd.concat([index, df1], axis=1)\n","total = total.set_index('index')\n","total"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibsM6_kNGzat","colab_type":"code","colab":{}},"source":["total.to_csv('GOOG.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VaFThucU5AyU","colab_type":"text"},"source":["##GOOG"]},{"cell_type":"code","metadata":{"id":"cgv42x1K5oHT","colab_type":"code","colab":{}},"source":["import pandas as pd\n","\n","df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Projects/20200906_GOOG_Monte_Carlo/GOOG.csv')\n","df.index = df.pop('index')\n","df = df.iloc[::-1]\n","df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7oYSNig_-c-1","colab_type":"code","colab":{}},"source":["from scipy.stats import skewnorm\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","#graphing timeseries\n","def graph_stocks(stock):\n","  #graph all stocks\n","  plt.figure(figsize=(28, 14))\n","  for c in stock.columns.values:\n","    #print(c)\n","    fig = plt.plot(stock.index, stock[c], lw=1, alpha=1)\n","  #plt.legend(loc='upper left', fontsize=12)\n","  #plt.ylabel('price in $')\n","\n","  #remove axis labels\n","  plt.gca().axes.get_yaxis().set_visible(False)\n","\n","def graph_returns(df):\n","  fig = plt.figure(figsize = (14,7))\n","  ax = fig.gca()\n","  df.hist(ax=ax, bins=100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h2eHOu_Z5wbS","colab_type":"code","colab":{}},"source":["returns = df.pct_change()\n","returns"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pfc7loxuQhR5","colab_type":"code","colab":{}},"source":["graph_stocks(df)\n","graph_returns(returns)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9lM0wA8gUmpI","colab_type":"code","colab":{}},"source":["def simulate_stock(initial_price, days, pdf):\n","\n","  def create_empty_df(days):\n","    #creare un empty DataFrame con le date\n","    empty = pd.Series(\n","        pd.date_range(\"2020-09-10\", periods=days, freq=\"D\")\n","    )\n","    empty = pd.DataFrame(empty)\n","    #si tagliano ore, minuti, secondi\n","    empty\n","\n","    #si tagliano ore, minuti, secondi\n","    empty.index = [str(x)[0:empty.shape[0]] for x in list(empty.pop(0))]\n","    empty\n","\n","    #final dataset con values\n","    stock = pd.DataFrame([x for x in range(0, empty.shape[0])])\n","    stock.index = empty.index\n","    return stock\n","\n","  #skeleton\n","  stock = create_empty_df(100)\n","\n","  #initial price\n","  stock[0][0] = initial_price\n","\n","  #create entire stock DataFrame\n","  for _ in range(1, stock.shape[0]):\n","    stock.iloc[_] = stock.iloc[_-1]*(1+float(pdf.sample(n=1)))\n","\n","  return stock"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xd0J6ZKVm8Yf","colab_type":"code","colab":{}},"source":["def create_simulation(n_iter, pdf):\n","  #create multiple stocks\n","  stock_list = list()\n","  column_name = list()\n","\n","  for _ in range(n_iter):\n","    print(_)\n","    text = '_'\n","    column_name.append(text + str(_))\n","    stock_list.append(simulate_stock(df.iloc[252][0], 252, pdf))\n","\n","  #join the stocks together\n","  stock = pd.concat([x for x in stock_list], axis=1)\n","  stock.columns = column_name\n","  stock\n","\n","  #adding benchmark\n","  stock['benchmark'] = df.iloc[252][0]\n","  return stock"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o79GSj9MSELS","colab_type":"text"},"source":["##Monte Carlo with available returns"]},{"cell_type":"code","metadata":{"id":"Dpc1EwjuRZfo","colab_type":"code","colab":{}},"source":["returns['GOOG'].dropna().sample(n=1)[0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CP0ev0cnnF12","colab_type":"code","colab":{}},"source":["simulation_real = create_simulation(10000, returns['GOOG'].dropna())\n","simulation_real"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZZKYfBmwSIsw","colab_type":"text"},"source":["##Monte Carlo with reconstructed Normal Distribution"]},{"cell_type":"code","metadata":{"id":"2e7R053vSS6O","colab_type":"code","colab":{}},"source":["mean = returns['GOOG'].mean()\n","sd = returns['GOOG'].std()\n","alfa = returns['GOOG'].skew()\n","\n","print(mean, sd, alfa)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qIRikQWvShrh","colab_type":"code","colab":{}},"source":["#simulated probability distribution of one stock\n","from scipy.stats import skewnorm\n","import matplotlib.pyplot as plt\n","sd, mean, alfa = sd, mean, alfa\n","\n","#invertire il segno di alfa\n","x = skewnorm.rvs(-alfa, size=100000) \n","def calc(k, sd, mean):\n","  return (k*sd)+mean\n","x = calc(x, sd, mean) #standard distribution\n","x = pd.DataFrame(x)\n","x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4NDDfgfdTq6Y","colab_type":"code","colab":{}},"source":["graph_returns(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7aK63OWQTnn3","colab_type":"code","colab":{}},"source":["#pick one random number from the distribution\n","#formally I would use cdf, but I just have to pick randomly from the 1000000 samples\n","float(x[0].sample(n=1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6OvmiWOSmQla","colab_type":"code","colab":{}},"source":["simulation_gen = create_simulation(100, x[0])\n","simulation_gen"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RywSipOInqbw","colab_type":"text"},"source":["##Compare results"]},{"cell_type":"code","metadata":{"id":"a--dP7-ynuSW","colab_type":"code","colab":{}},"source":["graph_stocks(simulation_real)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qMUNNZRghwDI","colab_type":"code","colab":{}},"source":["graph_stocks(simulation_gen)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QQyBccr0Zm2R","colab_type":"text"},"source":["##Extracting VaR"]},{"cell_type":"code","metadata":{"id":"U1BmttMvZpZP","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","print('VaR')\n","\n","#VaR at 90%\n","price = np.quantile(sorted(simulation_real.loc['2020-12-18 00:00:00']), 1-.90)\n","print('.90:', (price/1557)-1)\n","\n","#VaR at 95%\n","price = np.quantile(sorted(simulation_real.loc['2020-12-18 00:00:00']), 1-.95)\n","print('.95:', (price/1557)-1)\n","\n","#VaR at 99%\n","price = np.quantile(sorted(simulation_real.loc['2020-12-18 00:00:00']), 1-.99)\n","print('.99:', (price/1557)-1)"],"execution_count":null,"outputs":[]}]}